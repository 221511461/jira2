// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`API Authentication should return 200 if a valid token is provided 1`] = `Object {}`;

exports[`API Authentication should return 200 if token belongs to an admin 1`] = `Object {}`;

exports[`API Authentication should return 401 if the GraphQL query returns errors 1`] = `
Object {
  "errors": Array [
    Object {
      "extensions": Object {
        "code": "undefinedField",
        "fieldName": "isEmployeex",
        "typeName": "User",
      },
      "locations": Array [
        Object {
          "column": 5,
          "line": 4,
        },
      ],
      "message": "Field 'isEmployeex' doesn't exist on type 'User'",
      "path": Array [
        "query",
        "viewer",
        "isEmployeex",
      ],
    },
  ],
  "viewerPermissionQuery": "{
  viewer {
    login
    isEmployee
    organization(login: \\"github\\") {
      repository(name: \\"ecosystem-primitives\\") {
        viewerPermission
      }
    }
  }
}
",
}
`;

exports[`API Authentication should return 401 if the returned organization is null 1`] = `
Object {
  "error": "Unauthorized",
  "message": "Token provided does not have access to the \`github\` organization",
}
`;

exports[`API Authentication should return 401 if the token is invalid 1`] = `
Object {
  "code": 401,
  "message": "{\\"HttpError\\":{\\"message\\":\\"Bad credentials\\",\\"documentation_url\\":\\"https://developer.github.com/v4\\"}}",
}
`;

exports[`API Authentication should return 404 if no token is provided 1`] = `Object {}`;

exports[`API Authentication should return 500 if an error happens 1`] = `Object {}`;

exports[`API Endpoints installation should return 404 if no installation is found 1`] = `Object {}`;

exports[`API Endpoints installation should return information for an existing installation 1`] = `
Object {
  "connections": Array [
    Object {
      "isGlobalInstall": false,
      "updated_at": "Invalid Date",
    },
  ],
  "failedConnections": Array [],
  "hasConnections": true,
  "host": "https://test-atlassian-instance.net",
  "installationId": "test-installation-id",
  "repoSyncState": "http://127.0.0.1/api/test-installation-id/repoSyncState.json",
}
`;

exports[`API Endpoints repoSyncState should return 404 if no installation is found 1`] = `Object {}`;

exports[`API Endpoints repoSyncState should return the repoSyncState information for an existing installation 1`] = `
Object {
  "todo": "more info",
}
`;

exports[`API Endpoints sync should return 404 if no installation is found 1`] = `"Not Found"`;

exports[`API Endpoints sync should trigger the sync or start function 1`] = `"{\\"message\\":\\"Successfully (re)started sync for test-installation-id\\"}"`;

exports[`API Endpoints undo should migrate an installation 1`] = `"Successfully called migration complete for test-installation-id"`;

exports[`API Endpoints undo should migrate an installation 2`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "syncStatus": "COMPLETE",
      },
    ],
  ],
  "results": Array [
    Object {
      "isThrow": false,
      "value": undefined,
    },
  ],
}
`;

exports[`API Endpoints undo should return 404 if no installation is found 1`] = `"Not Found"`;

exports[`API Endpoints undo should undo a migration 1`] = `"Successfully called migration undo for test-installation-id"`;

exports[`API Endpoints undo should undo a migration 2`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "syncStatus": "FAILED",
      },
    ],
  ],
  "results": Array [
    Object {
      "isThrow": false,
      "value": undefined,
    },
  ],
}
`;
